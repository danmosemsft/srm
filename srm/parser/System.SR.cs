// <auto-generated>
using System.Reflection;

namespace FxResources.System.Text.RegularExpressions
{
    internal static class SR { }
}
namespace System
{
    internal static partial class SR
    {
        private static global::System.Resources.ResourceManager s_resourceManager;
        internal static global::System.Resources.ResourceManager ResourceManager => s_resourceManager ?? (s_resourceManager = new global::System.Resources.ResourceManager(typeof(FxResources.System.Text.RegularExpressions.SR)));

        /// <summary>Regular expression parser error '{0}' at offset {1}.</summary>
        internal static string @Generic => GetResourceString("Generic", @"Regular expression parser error '{0}' at offset {1}.");
        /// <summary>Alternation conditions do not capture and cannot be named.</summary>
        internal static string @AlternationHasNamedCapture => GetResourceString("AlternationHasNamedCapture", @"Alternation conditions do not capture and cannot be named.");
        /// <summary>Alternation conditions cannot be comments.</summary>
        internal static string @AlternationHasComment => GetResourceString("AlternationHasComment", @"Alternation conditions cannot be comments.");
        /// <summary>Destination array is not long enough to copy all the items in the collection. Check array index and length.</summary>
        internal static string @Arg_ArrayPlusOffTooSmall => GetResourceString("Arg_ArrayPlusOffTooSmall", @"Destination array is not long enough to copy all the items in the collection. Check array index and length.");
        /// <summary>The array cannot contain null elements.</summary>
        internal static string @ArgumentNull_ArrayWithNullElements => GetResourceString("ArgumentNull_ArrayWithNullElements", @"The array cannot contain null elements.");
        /// <summary>Cannot include class \\{0} in character range.</summary>
        internal static string @ShorthandClassInCharacterRange => GetResourceString("ShorthandClassInCharacterRange", @"Cannot include class \\{0} in character range.");
        /// <summary>Cannot include class in character range.</summary>
        internal static string @ShorthandClassInCharacterRangeNoPlaceholder => GetResourceString("ShorthandClassInCharacterRangeNoPlaceholder", @"Cannot include class in character range.");
        /// <summary>Start index cannot be less than 0 or greater than input length.</summary>
        internal static string @BeginIndexNotNegative => GetResourceString("BeginIndexNotNegative", @"Start index cannot be less than 0 or greater than input length.");
        /// <summary>Capture group numbers must be less than or equal to Int32.MaxValue.</summary>
        internal static string @QuantifierOrCaptureGroupOutOfRange => GetResourceString("QuantifierOrCaptureGroupOutOfRange", @"Capture group numbers must be less than or equal to Int32.MaxValue.");
        /// <summary>Capture number cannot be zero.</summary>
        internal static string @CaptureGroupOfZero => GetResourceString("CaptureGroupOfZero", @"Capture number cannot be zero.");
        /// <summary>Count cannot be less than -1.</summary>
        internal static string @CountTooSmall => GetResourceString("CountTooSmall", @"Count cannot be less than -1.");
        /// <summary>Enumeration has either not started or has already finished.</summary>
        internal static string @EnumNotStarted => GetResourceString("EnumNotStarted", @"Enumeration has either not started or has already finished.");
        /// <summary>Illegal conditional (?(...)) expression.</summary>
        internal static string @AlternationHasMalformedCondition => GetResourceString("AlternationHasMalformedCondition", @"Illegal conditional (?(...)) expression.");
        /// <summary>AppDomain data '{0}' contains the invalid value or object '{1}' for specifying a default matching timeout for System.Text.RegularExpressions.Regex.</summary>
        internal static string @IllegalDefaultRegexMatchTimeoutInAppDomain => GetResourceString("IllegalDefaultRegexMatchTimeoutInAppDomain", @"AppDomain data '{0}' contains the invalid value or object '{1}' for specifying a default matching timeout for System.Text.RegularExpressions.Regex.");
        /// <summary>Illegal \\ at end of pattern.</summary>
        internal static string @UnescapedEndingBackslash => GetResourceString("UnescapedEndingBackslash", @"Illegal \\ at end of pattern.");
        /// <summary>Illegal {x,y} with x &gt; y.</summary>
        internal static string @ReversedQuantifierRange => GetResourceString("ReversedQuantifierRange", @"Illegal {x,y} with x > y.");
        /// <summary>Incomplete \\p{X} character escape.</summary>
        internal static string @InvalidUnicodePropertyEscape => GetResourceString("InvalidUnicodePropertyEscape", @"Incomplete \\p{X} character escape.");
        /// <summary>Internal error in ScanRegex.</summary>
        internal static string @InternalError_ScanRegex => GetResourceString("InternalError_ScanRegex", @"Internal error in ScanRegex.");
        /// <summary>Invalid group name: Group names must begin with a word character.</summary>
        internal static string @CaptureGroupNameInvalid => GetResourceString("CaptureGroupNameInvalid", @"Invalid group name: Group names must begin with a word character.");
        /// <summary>Argument {0} cannot be zero-length.</summary>
        internal static string @InvalidEmptyArgument => GetResourceString("InvalidEmptyArgument", @"Argument {0} cannot be zero-length.");
        /// <summary>Length cannot be less than 0 or exceed input length.</summary>
        internal static string @LengthNotNegative => GetResourceString("LengthNotNegative", @"Length cannot be less than 0 or exceed input length.");
        /// <summary>Malformed \\k&lt;...&gt; named back reference.</summary>
        internal static string @MalformedNamedReference => GetResourceString("MalformedNamedReference", @"Malformed \\k<...> named back reference.");
        /// <summary>(?({0}) ) malformed.</summary>
        internal static string @AlternationHasMalformedReference => GetResourceString("AlternationHasMalformedReference", @"(?({0}) ) malformed.");
        /// <summary>Alternation has malformed reference.</summary>
        internal static string @AlternationHasMalformedReferenceNoPlaceholder => GetResourceString("AlternationHasMalformedReferenceNoPlaceholder", @"Alternation has malformed reference.");
        /// <summary>Malformed \\p{X} character escape.</summary>
        internal static string @MalformedUnicodePropertyEscape => GetResourceString("MalformedUnicodePropertyEscape", @"Malformed \\p{X} character escape.");
        /// <summary>Invalid pattern '{0}' at offset {1}. {2}</summary>
        internal static string @MakeException => GetResourceString("MakeException", @"Invalid pattern '{0}' at offset {1}. {2}");
        /// <summary>Missing control character.</summary>
        internal static string @MissingControlCharacter => GetResourceString("MissingControlCharacter", @"Missing control character.");
        /// <summary>Nested quantifier '{0}'.</summary>
        internal static string @NestedQuantifiersNotParenthesized => GetResourceString("NestedQuantifiersNotParenthesized", @"Nested quantifier '{0}'.");
        /// <summary>Nested quantifier no parenthesized.</summary>
        internal static string @NestedQuantifiersNotParenthesizedNoPlaceholder => GetResourceString("NestedQuantifiersNotParenthesizedNoPlaceholder", @"Nested quantifier no parenthesized.");
        /// <summary>Result cannot be called on a failed Match.</summary>
        internal static string @NoResultOnFailed => GetResourceString("NoResultOnFailed", @"Result cannot be called on a failed Match.");
        /// <summary>Not enough )'s.</summary>
        internal static string @InsufficientClosingParentheses => GetResourceString("InsufficientClosingParentheses", @"Not enough )'s.");
        /// <summary>Collection is read-only.</summary>
        internal static string @NotSupported_ReadOnlyCollection => GetResourceString("NotSupported_ReadOnlyCollection", @"Collection is read-only.");
        /// <summary>This operation is only allowed once per object.</summary>
        internal static string @OnlyAllowedOnce => GetResourceString("OnlyAllowedOnce", @"This operation is only allowed once per object.");
        /// <summary>This platform does not support writing compiled regular expressions to an assembly.</summary>
        internal static string @PlatformNotSupported_CompileToAssembly => GetResourceString("PlatformNotSupported_CompileToAssembly", @"This platform does not support writing compiled regular expressions to an assembly.");
        /// <summary>Quantifier {x,y} following nothing.</summary>
        internal static string @QuantifierAfterNothing => GetResourceString("QuantifierAfterNothing", @"Quantifier {x,y} following nothing.");
        /// <summary>The RegEx engine has timed out while trying to match a pattern to an input string. This can occur for many reasons, including very large inputs or excessive backtracking caused by nested quantifiers, back-references and other factors.</summary>
        internal static string @RegexMatchTimeoutException_Occurred => GetResourceString("RegexMatchTimeoutException_Occurred", @"The RegEx engine has timed out while trying to match a pattern to an input string. This can occur for many reasons, including very large inputs or excessive backtracking caused by nested quantifiers, back-references and other factors.");
        /// <summary>Replacement pattern error.</summary>
        internal static string @ReplacementError => GetResourceString("ReplacementError", @"Replacement pattern error.");
        /// <summary>[x-y] range in reverse order.</summary>
        internal static string @ReversedCharacterRange => GetResourceString("ReversedCharacterRange", @"[x-y] range in reverse order.");
        /// <summary>A subtraction must be the last element in a character class.</summary>
        internal static string @ExclusionGroupNotLast => GetResourceString("ExclusionGroupNotLast", @"A subtraction must be the last element in a character class.");
        /// <summary>Insufficient hexadecimal digits.</summary>
        internal static string @InsufficientOrInvalidHexDigits => GetResourceString("InsufficientOrInvalidHexDigits", @"Insufficient hexadecimal digits.");
        /// <summary>Too many | in (?()|).</summary>
        internal static string @AlternationHasTooManyConditions => GetResourceString("AlternationHasTooManyConditions", @"Too many | in (?()|).");
        /// <summary>Too many )'s.</summary>
        internal static string @InsufficientOpeningParentheses => GetResourceString("InsufficientOpeningParentheses", @"Too many )'s.");
        /// <summary>Reference to undefined group number {0}.</summary>
        internal static string @UndefinedNumberedReference => GetResourceString("UndefinedNumberedReference", @"Reference to undefined group number {0}.");
        /// <summary>Reference to undefined group number.</summary>
        internal static string @UndefinedNumberedReferenceNoPlaceholder => GetResourceString("UndefinedNumberedReferenceNoPlaceholder", @"Reference to undefined group number.");
        /// <summary>Reference to undefined group name '{0}'.</summary>
        internal static string @UndefinedNamedReference => GetResourceString("UndefinedNamedReference", @"Reference to undefined group name '{0}'.");
        /// <summary>Reference to undefined group name.</summary>
        internal static string @UndefinedNamedReferenceNoPlaceholder => GetResourceString("UndefinedNamedReferenceNoPlaceholder", @"Reference to undefined group name.");
        /// <summary>(?({0}) ) reference to undefined group.</summary>
        internal static string @AlternationHasUndefinedReference => GetResourceString("AlternationHasUndefinedReference", @"(?({0}) ) reference to undefined group.");
        /// <summary>Alternation has a reference to undefined group.</summary>
        internal static string @AlternationHasUndefinedReferenceNoPlaceholder => GetResourceString("AlternationHasUndefinedReferenceNoPlaceholder", @"Alternation has a reference to undefined group.");
        /// <summary>Unexpected opcode in regular expression generation: {0}.</summary>
        internal static string @UnexpectedOpcode => GetResourceString("UnexpectedOpcode", @"Unexpected opcode in regular expression generation: {0}.");
        /// <summary>Unknown property '{0}'.</summary>
        internal static string @UnrecognizedUnicodeProperty => GetResourceString("UnrecognizedUnicodeProperty", @"Unknown property '{0}'.");
        /// <summary>Unknown property Unicode property.</summary>
        internal static string @UnrecognizedUnicodePropertyNoPlaceholder => GetResourceString("UnrecognizedUnicodePropertyNoPlaceholder", @"Unknown property Unicode property.");
        /// <summary>Unrecognized control character.</summary>
        internal static string @UnrecognizedControlCharacter => GetResourceString("UnrecognizedControlCharacter", @"Unrecognized control character.");
        /// <summary>Unrecognized escape sequence \\{0}.</summary>
        internal static string @UnrecognizedEscape => GetResourceString("UnrecognizedEscape", @"Unrecognized escape sequence \\{0}.");
        /// <summary>Unrecognized grouping construct.</summary>
        internal static string @InvalidGroupingConstruct => GetResourceString("InvalidGroupingConstruct", @"Unrecognized grouping construct.");
        /// <summary>Unterminated [] set.</summary>
        internal static string @UnterminatedBracket => GetResourceString("UnterminatedBracket", @"Unterminated [] set.");
        /// <summary>Unterminated (?#...) comment.</summary>
        internal static string @UnterminatedComment => GetResourceString("UnterminatedComment", @"Unterminated (?#...) comment.");

    }
}
